//
// time: Sun Mar 08 22:09:19 2015
//
// version: 3.2.0 (format), 4.4.4 (DX)
//
//
//
// macro reference (direct): MinMax MinMax.net
include "MinMax.net"
//
// Begin MDF
// MODULE RGBColormap
// CATEGORY Macros
// DESCRIPTION RGB counterpart of the HSV Colormap module
// INPUT data; field; (none);  
// INPUT colormap_endpoint_RGB_values; value list or string list; (none);  
// OUTPUT colormap; field;  
// End MDF
// workspace: width = 229, height = 612
// layout: snap = 0, width = 50, height = 50, align = NN
//
macro RGBColormap(
 data
,colormap_endpoint_RGB_values
) -> (
 colormap
) {
    // 
    // node Input[2]: x = 10, y = 10, inputs = 0, label = Input
    // parameter: position = 1, name = 'data', value = '(none)', descriptive = 1, description = ' ', required = 1, visible = 1
    //
RGBColormap_Input_2_out_1 = data;
    // 
    // node Extract[1]: x = 18, y = 100, inputs = 2, label = Extract
    //
RGBColormap_Extract_1_out_1 = 
    Extract(
    RGBColormap_Input_2_out_1,
    NULL
    ) [instance: 1, cache: 1];
    // 
    // node MinMax[1]: x = 15, y = 190, inputs = 1, label = MinMax
    //
RGBColormap_MinMax_1_out_1,
RGBColormap_MinMax_1_out_2 = 
    MinMax(
    RGBColormap_Extract_1_out_1
    ) [instance: 1, cache: 1];
    // 
    // node Compute[6]: x = 111, y = 370, inputs = 2, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "[$0]"
    // expression: value = [a]
    // name[2]: value = a
    //
RGBColormap_Compute_6_out_1 = 
    Compute(
    "[$0]",
    RGBColormap_MinMax_1_out_1
    ) [instance: 6, cache: 1];
    // 
    // node Input[3]: x = 81, y = 100, inputs = 0, label = Input
    // parameter: position = 2, name = 'colormap_endpoint_RGB_values', value = '(none)', descriptive = 1, description = ' ', required = 1, visible = 1
    //
RGBColormap_Input_3_out_1 = colormap_endpoint_RGB_values;
    // 
    // node Inquire[1]: x = 90, y = 190, inputs = 3, label = Inquire
    // input[2]: defaulting = 0, visible = 1, type = 32, value = "items"
    //
RGBColormap_Inquire_1_out_1 = 
    Inquire(
    RGBColormap_Input_3_out_1,
    "items",
    NULL
    ) [instance: 1, cache: 1];
    // 
    // node Compute[7]: x = 66, y = 280, inputs = 4, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "$2>2?[($1-$0)/($2-1.0)]:[$1-$0]"
    // expression: value = c>2?[(b-a)/(c-1.0)]:[b-a]
    // name[2]: value = a
    // name[3]: value = b
    // name[4]: value = c
    //
RGBColormap_Compute_7_out_1 = 
    Compute(
    "$2>2?[($1-$0)/($2-1.0)]:[$1-$0]",
    RGBColormap_MinMax_1_out_1,
    RGBColormap_MinMax_1_out_2,
    RGBColormap_Inquire_1_out_1
    ) [instance: 7, cache: 1];
    // 
    // node Construct[1]: x = 133, y = 460, inputs = 4, label = RGB linear colour map constructor
    // input[1]: defaulting = 1, visible = 1, type = 16777224, value = {[0]}
    // input[2]: defaulting = 1, visible = 1, type = 16777224, value = {[100]}
    // input[3]: defaulting = 1, visible = 1, type = 1, value = 2
    // input[4]: defaulting = 1, visible = 1, type = 16777245, value = {[0,0.5,1][1,0.5,0]}
    //
RGBColormap_Construct_1_out_1 = 
    Construct(
    RGBColormap_Compute_6_out_1,
    RGBColormap_Compute_7_out_1,
    RGBColormap_Inquire_1_out_1,
    RGBColormap_Input_3_out_1
    ) [instance: 1, cache: 1];
    // 
    // node Output[3]: x = 154, y = 550, inputs = 1, label = Output
    // parameter: position = 1, name = 'colormap', value = ' ', descriptive = 0, description = ' ', required = 0, visible = 1
    //
colormap = RGBColormap_Construct_1_out_1;
// network: end of macro body
}
RGBColormap_Input_2_out_1 = NULL;
RGBColormap_Extract_1_out_1 = NULL;
RGBColormap_MinMax_1_out_1 = NULL;
RGBColormap_MinMax_1_out_2 = NULL;
RGBColormap_Compute_6_out_1 = NULL;
RGBColormap_Input_3_out_1 = NULL;
RGBColormap_Inquire_1_out_1 = NULL;
RGBColormap_Compute_7_out_1 = NULL;
RGBColormap_Construct_1_out_1 = NULL;
