//
// time: Mon Mar 17 19:00:17 2014
//
// version: 3.2.0 (format), 4.4.4 (DX)
//
//
// Begin MDF
// MODULE MinMax
// CATEGORY Macros
// INPUT data; object; (none); Data from which to return the minimum
// OUTPUT minimum; value or value list or field;  
// OUTPUT maximum; value or value list or field;  
// End MDF
// workspace: width = 375, height = 519
// layout: snap = 0, width = 50, height = 50, align = NN
//
macro MinMax(
 data
) -> (
 minimum
,maximum
) {
    // 
    // node Input[1]: x = 130, y = 10, inputs = 0, label = Input
    // parameter: position = 1, name = 'data', value = ' ', descriptive = 0, description = 'Data from which to return the minimum', required = 1, visible = 1
    //
MinMax_Input_1_out_1 = data;
    // 
    // node ForEachMember[1]: x = 91, y = 100, inputs = 1, label = ForEachMember
    //
MinMax_ForEachMember_1_out_1,
MinMax_ForEachMember_1_out_2,
MinMax_ForEachMember_1_out_3 = 
    ForEachMember(
    MinMax_Input_1_out_1
    ) [instance: 1, cache: 1];
    // 
    // node GetLocal[1]: x = 308, y = 100, inputs = 3, label = GetLocal
    // input[1]: defaulting = 0, visible = 1, type = 67108863, value = {1e20}
    //
MinMax_GetLocal_1_out_1,
MinMax_GetLocal_1_out_2 = 
    GetLocal(
    {1e20},
    NULL,
    NULL
    ) [instance: 1, cache: 1];
    // 
    // node Compute[6]: x = 170, y = 202, inputs = 3, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "$0<$1?$0:$1"
    // expression: value = a<b?a:b
    // name[2]: value = a
    // name[3]: value = b
    //
MinMax_Compute_6_out_1 = 
    Compute(
    "$0<$1?$0:$1",
    MinMax_ForEachMember_1_out_1,
    MinMax_GetLocal_1_out_1
    ) [instance: 6, cache: 1];
    // 
    // node GetLocal[2]: x = 226, y = 100, inputs = 3, label = GetLocal
    // input[1]: defaulting = 0, visible = 1, type = 67108863, value = {-1e20}
    //
MinMax_GetLocal_2_out_1,
MinMax_GetLocal_2_out_2 = 
    GetLocal(
    {-1e20},
    NULL,
    NULL
    ) [instance: 2, cache: 1];
    // 
    // node Compute[7]: x = 94, y = 190, inputs = 3, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "$0>$1?$0:$1"
    // expression: value = a>b?a:b
    // name[2]: value = a
    // name[3]: value = b
    //
MinMax_Compute_7_out_1 = 
    Compute(
    "$0>$1?$0:$1",
    MinMax_ForEachMember_1_out_1,
    MinMax_GetLocal_2_out_1
    ) [instance: 7, cache: 1];
    // 
    // node Output[1]: x = 181, y = 457, inputs = 1, label = Output
    // parameter: position = 1, name = 'minimum', value = ' ', descriptive = 0, description = ' ', required = 0, visible = 1
    //
minimum = MinMax_Compute_6_out_1;
    // 
    // node Output[2]: x = 114, y = 389, inputs = 1, label = Output
    // parameter: position = 2, name = 'maximum', value = ' ', descriptive = 0, description = ' ', required = 0, visible = 1
    //
maximum = MinMax_Compute_7_out_1;
    // 
    // node SetLocal[1]: x = 309, y = 370, inputs = 3, label = SetLocal
    //
    SetLocal(
    MinMax_Compute_6_out_1,
    MinMax_GetLocal_1_out_2,
    NULL
    ) [instance: 1, cache: 1];
    // 
    // node SetLocal[2]: x = 227, y = 350, inputs = 3, label = SetLocal
    //
    SetLocal(
    MinMax_Compute_7_out_1,
    MinMax_GetLocal_2_out_2,
    NULL
    ) [instance: 2, cache: 1];
// network: end of macro body
}
MinMax_Input_1_out_1 = NULL;
MinMax_ForEachMember_1_out_1 = NULL;
MinMax_GetLocal_1_out_1 = NULL;
MinMax_GetLocal_1_out_2 = NULL;
MinMax_Compute_6_out_1 = NULL;
MinMax_GetLocal_2_out_1 = NULL;
MinMax_GetLocal_2_out_2 = NULL;
MinMax_Compute_7_out_1 = NULL;
